# environment setup
language: swift
os: osx
osx_image: xcode11.4

cache:
    bundler: true
    cocoapods: true

before_install:
  - export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
  - echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, BRANCH=$BRANCH"
    # Make sure we use the bundler version that is provided in the Gemfile.lock file
  - gem install bundler -v "$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)"

  # install dependencies
install:
  - bundle config set path 'vendor/bundle'
  - bundle install
  - bundle info jazzy
  - bundle exec pod install

stages:
  # Deploy docs stage
  # Allow only if we push to master
  # TODO: Add check for: commit_message =~ ^[Release].*$
  - name: deploy_docs
    if: type = push AND branch = master
  # Test stage
  # Allow only if the type is a pull request and the branch is 'feature/...'
  - name: test
    if: type = pull_request AND env(TRAVIS_PULL_REQUEST_BRANCH) =~ ^feature\/.*$
  # Deploy new release stage
  # Allow only if the type is a PR and the branch is 'release/...'
  - name: deploy_new_release
    if: type = pull_request AND env(TRAVIS_PULL_REQUEST_BRANCH) =~ ^release\/.*$



# jobs and stages to run
jobs:
  include:
    ###################### master ######################
    ### Docs deployment
    - stage: deploy_docs
      name: "Deploy iOS App Documentation from master to GitHub Pages"
      script:
        - bundle exec fastlane generate_docs
      after_failure:
        # Sleep to recover full logs
        - sleep 4
        - find /var/folders/z3 -name '*.log' -exec cat {} \;
      deploy:
        provider:     pages
        skip-cleanup: true
        github-token: $GITHUB_TOKEN
        keep-history: true
        local-dir:    docs/src

    ###################### feature/ PR ######################
    ### Tests
    - stage: test
      name: "iOS App unit tests"
      script:
        - bundle exec fastlane tests

    ###################### release/ PR ######################
    ### New Release Deployment
    - stage: deploy_new_release
      ## Tests
      name: "Unit & UI Tests"
      script:
        - bundle exec fastlane tests 
      ## Screenshots
      script:
        - bundle exec fastlane deploy_screenshots
      name: "Generate Screenshots"
      ## TF Upload
      script:
        - bundle exec fastlane deploy_beta_mocks
      name: "TestFlight Upload"
      ## Documentation generation
      script:
        - bundle exec fastlane generate_and_commit_documentation
      name: "Generate Documentation"
      